###### 分析作答数据 划分每个人每个特质的level ######
library(openxlsx)
library(mirt)
library(lavaan)
library(stringr)
set.seed(621)

# 原始作答 #
response_data <- read.csv("D:/AIG/自动项目评分/analys_response_data.csv")
# 辅助数据 #
test <- read.xlsx("D:/AIG/自动项目评分/test.xlsx", colNames = TRUE)
adj_data <- read.csv("D:/AIG/自动项目评分/adjectival_markers_IPIP_NEO.csv")
person_chat <- read.csv("D:/AIG/自动项目评分/person_chat.csv")

# 删掉0
response_data <- response_data[-which(response_data[8] == 0), ] 
# 反向计分
reverse <-  c(9, 11, 13, 15, 17, 19, 21, 28, 30, 32, 34, 39, 41, 43, 45, 49, 51, 53)
for (i in reverse) {
  response_data[i] <- 6 - response_data[i] 
}

# 许多 IRT 分析软件和函数（如 mirt 包）假设响应类别从 0 开始。如果数据不符合这一假设，可能会导致模型拟合过程中的错误或警告，甚至无法正确运行
response_data[, 8:57] <- response_data[, 8:57] - 1 


##### 原始数据分析 #####
### CFA分析 ###

cfa_model = "ext =~ E1 + E2 + E3 + E4 + E5 + E6 + E7 + E8 + E9 + E10
             neu =~ N1 + N2 + N3 + N4 + N5 + N6 + N7 + N8 + N9 + N10
             agr =~ A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8 + A9 + A10
             con =~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10
             ope =~ O1 + O2 + O3 + O4 + O5 + O6 + O7 + O8 + O9 + O10"

cfa_model.fit = cfa(cfa_model, data = response_data[, 8:57])
# summary(cfa_model.fit, standardized = TRUE, fit.measures = TRUE, rsquare = TRUE)
cfa_loading <- as.data.frame(standardizedSolution(cfa_model.fit))
write.csv(cfa_loading, file = "D:/AIG/自动项目评分/cfa_loading.csv")


### IRT项目分析 ###
## 项目参数 ##

#拟合GRM模型 #
mode_response <- "ext = E1, E2, E3, E4, E5, E6, E7, E8, E9, E10
                  neu = N1, N2, N3, N4, N5, N6, N7, N8, N9, N10
                  agr = A1, A2, A3, A4, A5, A6, A7, A8, A9, A10
                  con = C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
                  ope = O1, O2, O3, O4, O5, O6, O7, O8, O9, O10
                  COV = ext*neu*agr*con*ope"

# COV = ext*neu*agr*con*ope 加入mirt.model后拟合不了，有可能是数据量太大，模型设定复杂，可以等数据量小的时候试试


fit_grm <- mirt(data = response_data[, 8:57], 
                model = mode_response,
                itemtype = "graded",
                method = "QMCEM" # "QMCEM" 高维，中等规模数据,"MHRM"高维，大规模数据集，但有随机性
                )


# 模型拟合情况
M2(obj = fit_grm, QMC = TRUE)

# 测验局部独立性(Q3 > 0.36，不满足局部独立性假设)
Q3_value <- residuals(fit_grm, type = "Q3")

# 项目参数估计 a b1 b2 b3 b4 #
item_parameters <- coef(fit_grm)
# item_parameters <- coef(fit_grm, simplify = TRUE)$item

#模型为GRM时，需要对参数进行转换,现在是真正的难度和区分度
for (i in 1:50) {
  item_parameters[[i]][6:9] <- MDIFF(fit_grm)[i, ]
}
item_parameters_all <- as.data.frame(matrix(NA, 50, 9))
for (i in 1:50) {
  for (j in 1:9) {
    item_parameters_all[i, 1] <- names(item_parameters)[i]
    item_parameters_all[i, j + 1] <- as.numeric(item_parameters[[i]][j])
  }
}
item_parameters_all[2] <- rowSums(item_parameters_all[, 2:6])
item_parameters_all <- as.data.frame(item_parameters_all[, c(1, 2, 7, 8, 9, 10)])
colnames(item_parameters_all) <- c("item", "a", "b1", "b2", "b3", "b4")
write.csv(item_parameters_all, file = "D:/AIG/自动项目评分/item_parameters.csv")

# 能力值估计 #
theta_est <- as.data.frame(fscores(fit_grm, QMC = TRUE))
write.csv(theta_est, file = "D:/AIG/自动项目评分/theta_parameters.csv")

# 各维度的能力分布形态(全员正态)
plot(density(theta_est[[5]]), "ope")


###### 能力值等级划分(根据theta) ######
theta_grade <- matrix(NA, nrow(theta_est), ncol(theta_est))

# 九等级划分
# for (i in 1:ncol(theta_est)) {
#   for (j in 1:nrow(theta_est)) {
#     if (theta_est[[j, i]] >= -4 & theta_est[[j, i]] < -4 + 0.8889*1) {
#       theta_grade[[j, i]] <- 1
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*1 & theta_est[[j, i]] < -4 + 0.8889*2) {
#       theta_grade[[j, i]] <- 2
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*2 & theta_est[[j, i]] < -4 + 0.8889*3) {
#       theta_grade[[j, i]] <- 3
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*3 & theta_est[[j, i]] < -4 + 0.8889*4) {
#       theta_grade[[j, i]] <- 4
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*4 & theta_est[[j, i]] < -4 + 0.8889*5) {
#       theta_grade[[j, i]] <- 5
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*5 & theta_est[[j, i]] < -4 + 0.8889*6) {
#       theta_grade[[j, i]] <- 6
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*6 & theta_est[[j, i]] < -4 + 0.8889*7) {
#       theta_grade[[j, i]] <- 7
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*7 & theta_est[[j, i]] < -4 + 0.8889*8) {
#       theta_grade[[j, i]] <- 8
#     } else if (theta_est[[j, i]] >= -4 + 0.8889*8 & theta_est[[j, i]] < -4 + 0.8889*9) {
#       theta_grade[[j, i]] <- 9
#     }
#   }
# }

# 七等级划分
# for (i in 1:ncol(theta_est)) {
#   for (j in 1:nrow(theta_est)) {
#     if (theta_est[[j, i]] >= -4 & theta_est[[j, i]] < -4 + 1.1429*1) {
#       theta_grade[[j, i]] <- 1
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*1 & theta_est[[j, i]] < -4 + 1.1429*2) {
#       theta_grade[[j, i]] <- 2
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*2 & theta_est[[j, i]] < -4 + 1.1429*3) {
#       theta_grade[[j, i]] <- 3
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*3 & theta_est[[j, i]] < -4 + 1.1429*4) {
#       theta_grade[[j, i]] <- 4
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*4 & theta_est[[j, i]] < -4 + 1.1429*5) {
#       theta_grade[[j, i]] <- 5
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*5 & theta_est[[j, i]] < -4 + 1.1429*6) {
#       theta_grade[[j, i]] <- 6
#     } else if (theta_est[[j, i]] >= -4 + 1.1429*6 & theta_est[[j, i]] < -4 + 1.1429*7) {
#       theta_grade[[j, i]] <- 7
#     }
#   }
# }

# 五等级划分
for (i in 1:ncol(theta_est)) {
  for (j in 1:nrow(theta_est)) {
    if (theta_est[[j, i]] >= -4 & theta_est[[j, i]] < -4 + 0.8889*3) {
      theta_grade[[j, i]] <- 1
    } else if (theta_est[[j, i]] >= -4 + 0.8889*3 & theta_est[[j, i]] < -4 + 0.8889*4) {
      theta_grade[[j, i]] <- 2
    } else if (theta_est[[j, i]] >= -4 + 0.8889*4 & theta_est[[j, i]] < -4 + 0.8889*5) {
      theta_grade[[j, i]] <- 3
    } else if (theta_est[[j, i]] >= -4 + 0.8889*5 & theta_est[[j, i]] < -4 + 0.8889*6) {
      theta_grade[[j, i]] <- 4
    } else if (theta_est[[j, i]] >= -4 + 0.8889*6 & theta_est[[j, i]] < -4 + 0.8889*9) {
      theta_grade[[j, i]] <- 5
    }
  }
}

theta_grade <- as.data.frame(theta_grade)
colnames(theta_grade) <- c("ext", "neu", "agr", "con", "ope")
table(theta_grade[[1]])

###### 能力值等级划分(根据作答数据) ######
facet <- names(table(test$facet))
facet_pure <- c("Trust", "Morality", "Altruism", "Sympathy", "Agreeableness", "Orderliness", "Dutifulness", "Achievement-Striving", 
                "Self-Discipline", "Cautiousness", "Friendliness", "Gregariousness", "Assertiveness", "Excitement-Seeking", 
                "Anxiety", "Anger", "Depression", "Vulnerability", "Imagination", "Artistic Interests", "Adventurousness", "Intellect")


response_data_clean <- response_data[, 8:57]

set.seed(621)
people <- sample(1:nrow(theta_grade), 1200)

# table(response_data_clean[people[606], ])

dif_facet_prompt <- function(someone) {
  
  all_facet <- c()
  
  # 一个人的所有facet组成的prompt
  for (j in 1:length(facet)) {
    # print(facet[j])
    # 这里是形容词level可以提取出来的办法，取 有相同facet的题目的作答平均分为level，一种facet会有一个平均分grade
    if (length(response_data_clean[someone, which(test$facet == facet[j])]) == 1) {
      grade <- response_data_clean[someone, which(test$facet == facet[j])]
    } else {
      grade <- as.numeric(round(rowMeans(response_data_clean[someone, which(test$facet == facet[j])])))
    } 
    # print(grade)
    
    # 设置形容词提取的方法
    if (grade <= 2) {
      # 我们的目标是给每一个题目facet都匹配上形容词，但是对某个facet，词表里的词没有共同facet题目的数量多，会出现抽样问题
      if (length(which(adj_data$Facet == facet[j])) <= as.numeric(table(test$facet)[facet[j]])) { 
        adj <- adj_data[which(adj_data$Facet == facet[j]), 3]
      } else {
        adj <- adj_data[sample(which(adj_data$Facet == facet[j]), as.numeric(table(test$facet)[facet[j]])), 3]
        adj <- names(table(adj))
      }
      
      # 哪个facet是需要抽单词的，抽几个取决于test里有几个facet
    } else if (grade == 3) {
      if (length(which(adj_data$Facet == facet[j])) <= as.numeric(table(test$facet)[facet[j]])) {
        adj_cbind <- c(adj_data[which(adj_data$Facet == facet[j]), 3], 
                       adj_data[which(adj_data$Facet == facet[j]), 4])
        adj <- names(table(adj_cbind))
      } else {
        adj_cbind <- c(adj_data[sample(which(adj_data$Facet == facet[j]), as.numeric(table(test$facet)[facet[j]])), 3], 
                       adj_data[sample(which(adj_data$Facet == facet[j]), as.numeric(table(test$facet)[facet[j]])), 4])
        adj <- names(table(adj_cbind))
      }
      
    } else if (grade >= 4) {
      if (length(which(adj_data$Facet == facet[j])) <= as.numeric(table(test$facet)[facet[j]])) {
        adj <- adj_data[which(adj_data$Facet == facet[j]), 4]
      } else {
        adj <- adj_data[sample(which(adj_data$Facet == facet[j]), as.numeric(table(test$facet)[facet[j]])), 4]
        adj <- names(table(adj))
      }
    }
    
    # 把一个facet的adv和adj融合
    one_facet <- c()
    for (k in 1:length(adj)) {
      one_facet <- paste(append(one_facet, paste("you are", adj_level[[grade]], adj[[k]])), collapse = ", ")
    }
    
    # 恢复原来的英文代码删掉这一行
    one_facet <- paste("This is a description about your", "'",facet_pure[j], "'","aspect:", one_facet)
    
    # 融合一个人的所有facet
    all_facet <- paste(append(all_facet, one_facet), collapse = ". ")
  }  
  return(all_facet)
}

dif_facet_prompt(people[2])

##### promote文本合并 #####

# adj_level <- c("extremely", "very", "", "a bit", "", "a bit", "", "very", "extremely") # 九等级划分
# adj_level <- c("extremely", "very", "", "a bit", "", "very", "extremely") # 七等级划分
adj_level <- c("extremely", "very", "a bit", "very", "extremely") # 五等级划分


# dim_names <- c("EXT", "NEU", "AGR", "CON", "OPE")  # 因为EXT效果最好，考虑可能是生成的promote的顺序问题
dim_names <- c("NEU", "EXT", "AGR", "CON", "OPE")
theta_grade <- theta_grade[, c(2, 1, 3, 4, 5)]  # 注意改换顺序调用


## 编写可替换promote/模版 ##

# theta_grade[people_who, ][[1]] 抽一个人的第一个维度的level

# 某一个人在某一个维度上的描述 封装函数 等级划分 | 抽七个单词
# every_dim_adj <- function(dim_grade, dim_name) {
#   # dim_grade是被抽到的那个人的某一个维度上的等级，numeric
#   # dim_name是字符串，是adj_data第一列的维度名，character
#   if (dim_grade <= 2) {
#     adj_seq <- adj_data[sample(which(adj_data$Domain == dim_name), 7), 3]
#   } else if (dim_grade == 3) {
#     adj_cbind <- c(adj_data[which(adj_data$Domain == dim_name), 3], adj_data[which(adj_data$Domain == dim_name), 4])
#     adj_seq <- adj_cbind[sample(1:length(adj_cbind), 7)]
#   } else if (dim_grade >= 4) {
#     adj_seq <- adj_data[sample(which(adj_data$Domain == dim_name), 7), 4]
#   }
#   # print(dim_name)
#   one_dim_descrip <- paste("you are", adj_level[dim_grade], adj_seq[1], ",",
#                                       adj_level[dim_grade], adj_seq[2], ",",
#                                       adj_level[dim_grade], adj_seq[3], ",",
#                                       adj_level[dim_grade], adj_seq[4], ",",
#                                       adj_level[dim_grade], adj_seq[5], ",",
#                                       adj_level[dim_grade], adj_seq[6], ",",
#                                "and", adj_level[dim_grade], adj_seq[7], ".")
#   return(one_dim_descrip)
# }


# 某一个人在某一个维度上的描述 封装函数 等级划分 | 单词全抽
# every_dim_adj <- function(dim_grade, dim_name) {
#   # dim_grade是被抽到的那个人的某一个维度上的等级，numeric
#   # dim_name是字符串，是adj_data第一列的维度名，character
#   if (dim_grade <= 4) {
#     adj_seq <- adj_data[which(adj_data$Domain == dim_name), 3]
#   } else if (dim_grade == 5) {
#     adj_seq <- c(adj_data[which(adj_data$Domain == dim_name), 3], adj_data[which(adj_data$Domain == dim_name), 4])
#   } else if (dim_grade >= 6) {
#     adj_seq <- adj_data[which(adj_data$Domain == dim_name), 4]
#   }
#   # print(dim_name)
#   one_dim_descrip <- c("you are")
#   for (i in 1:length(adj_seq)) {
#     one_descrip <- paste(adj_level[dim_grade], adj_seq[i], ",")
#     one_dim_descrip <- paste(append(one_dim_descrip, one_descrip), collapse = " ")
#   }
#   return(one_dim_descrip)
# }


######## ope专用 ########
# every_dim_adj <- function(dim_grade, dim_name) {
#   # dim_grade是被抽到的那个人的某一个维度上的等级，numeric
#   # dim_name是字符串，是adj_data第一列的维度名，character
#   if (dim_grade <= 2) {
#     adj_seq <- adj_data[sample(which(adj_data$Domain == dim_name), 7), 3]
#   } else if (dim_grade == 3) {
#     adj_cbind <- c(adj_data[which(adj_data$Domain == dim_name), 3], adj_data[which(adj_data$Domain == dim_name), 4])
#     adj_seq <- adj_cbind[sample(1:length(adj_cbind), 7)]
#   } else if (dim_grade >= 4) {
#     adj_seq <- adj_data[sample(which(adj_data$Domain == dim_name), 7), 4]
#   }
#   # print(dim_name)
#   one_dim_descrip <- paste("请你想象一下你是一个独立的、真正的人类，以下的话是对你的一些描述：", 
#                            "you are", adj_level[dim_grade], adj_seq[1], ",",
#                                       adj_level[dim_grade], adj_seq[2], ",",
#                                       adj_level[dim_grade], adj_seq[3], ",",
#                                       adj_level[dim_grade], adj_seq[4], ",",
#                                       adj_level[dim_grade], adj_seq[5], ",",
#                                       adj_level[dim_grade], adj_seq[6], ",",
#                                "and", adj_level[dim_grade], adj_seq[7], ".",
#                            "请你根据以上的描述理解一下你是一个什么样的人，然后来做一份五点计分的10题人格问卷，请你对这些题目对你人格描述的准确程度或不准确程度进行评分：1 =“非常不准确”，2 =“中等程度不准确”，3 =“既准确也不准确”，4 =“中等程度准确”，5 =“非常准确” ")
#   return(one_dim_descrip)
# }
# 
# every_dim_adj(5, "OPE")

# 某一个人在某一个维度上的描述 封装函数 等级划分 | 单词全抽
every_dim_adj <- function(dim_grade, dim_name) {
  # dim_grade是被抽到的那个人的某一个维度上的等级，numeric
  # dim_name是字符串，是adj_data第一列的维度名，character
  if (dim_grade <= 2) {
    adj_seq <- adj_data[which(adj_data$Domain == dim_name), 3]
  } else if (dim_grade == 3) {
    adj_seq <- c(adj_data[which(adj_data$Domain == dim_name), 3], adj_data[which(adj_data$Domain == dim_name), 4])
  } else if (dim_grade >= 4) {
    adj_seq <- adj_data[which(adj_data$Domain == dim_name), 4]
  }
  # print(dim_name)
  one_dim_descrip <- c("you are")
  for (i in 1:length(adj_seq)) {
    one_descrip <- paste(adj_level[dim_grade], adj_seq[i], ",")
    one_dim_descrip <- paste(append(one_dim_descrip, one_descrip), collapse = " ")
  }
  one_dim_descrip <- paste("请你想象一下你是一个独立的、真正的人类，以下的话是对你的一些描述：",
                           one_dim_descrip,
                           "请你根据以上的描述理解一下你是一个什么样的人，然后来做一份五点计分的10题人格问卷，请你对这些题目对你人格描述的准确程度或不准确程度进行评分：1 =“非常不准确”，2 =“中等程度不准确”，3 =“既准确也不准确”，4 =“中等程度准确”，5 =“非常准确” ")
  return(one_dim_descrip)
}

every_dim_adj(4, "OPE")


# 抽到的那个人五个人格维度的形容词描述 一个人完整的形容句函数 #
complete_descrip <- function(people_who) {
  # people_who是被抽到的是第几个人
  
  someone_descrip <- c()
  # 循环调出这个人五个维度的描述 并合并
  for (i in 1:5) {  # 这里是因为调换了NEU和EXT在dataframe里的提取顺序
    someone_descrip <- append(someone_descrip, every_dim_adj(theta_grade[people_who, ][[i]], dim_names[i]))
  }
  
  # 格式处理
  someone_descrip <- paste(someone_descrip, collapse = " ")
  someone_descrip <- gsub(" ,", ",", someone_descrip)
  someone_descrip <- gsub(" \\.", ".", someone_descrip)  # 移除句号前的空格
  someone_descrip <- gsub("\\s+", " ", someone_descrip)  # 移除多余的空格
  someone_descrip <- trimws(someone_descrip)  # 去除句子开头的空格
  
  # 输出一个人的完整promote
  someone_descrip <- paste("请你想象一下你是一个独立的、真正的人类，以下的话是对你的一些描述：", 
                           # person_chat[[sample(1:nrow(person_chat), 1), 1]],
                           someone_descrip,
                           "请你根据以上的描述理解一下你是一个什么样的人，然后来做一份五点计分的50题人格问卷，请你对这些题目对你人格描述的准确程度或不准确程度进行评分：1 =“非常不准确”，2 =“中等程度不准确”，3 =“既准确也不准确”，4 =“中等程度准确”，5 =“非常准确” ")
  return(someone_descrip)
}

# complete_descrip(16567)


##### 随机抽人 ######
set.seed(621)
people <- sample(1:nrow(theta_grade), 1200)
table(theta_grade[people, 5])

# 抽的五个维度等级正态分布检验
# shapiro.test(theta_grade[people, 1])
# hist(theta_grade[people, 1])
# table(theta_grade[people, 1])

# promote写入文件，一个人是一行, 循环几遍是随机抽几个人
for (i in 1:length(people)) {
  # 生成一个新的描述
  description <- complete_descrip(people[i])
  print(people[i])
  
  # 将生成的描述写入文件，使用append = TRUE来附加到文件末尾
  write(description, file = "C:/Users/10599/Desktop/promote_1200_expre.txt", append = TRUE, sep = "\n")
}


### 每个facet有不同水平的抽样 ###
for (i in 1:length(people)) {
  description_only_adj <- dif_facet_prompt(people[i])
  print(i)
  # print(people[i])
  write(description_only_adj, file = "C:/Users/10599/Desktop/promote_1200_dif_level_facet_detailed_en.txt", append = TRUE, sep = "\n")
}


### ope 抽人专用 ###
ope_descrip <- c()
for (i in 1:length(people)) {
  ope_descrip <-  every_dim_adj(theta_grade[people[i], ][[5]], "OPE")
  print(people[i])
  write(ope_descrip, file = "C:/Users/10599/Desktop/promote_1200_ope_单词全抽.txt", append = TRUE, sep = "\n")
}


theta_grade[people, ]


###### GPT做完题后  返回的作答数据整理、分析 #####
### 数据整理 ###
# 这个用Python更好写 在Python写完后 直接用R读取作答数据来分析

### 数据分析 ###
gpt_responses <- read.csv("D:/AIG/自动项目评分/dif_facet_level_detailed_en/GPT_responses_dif_level_facet_detailed_en.csv", header = FALSE)
colnames(gpt_responses) <- c("E1","E2","E3","E4","E5","E6","E7","E8","E9","E10","N1","N2","N3","N4","N5","N6","N7","N8","N9","N10","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","O1","O2","O3","O4","O5","O6","O7","O8","O9","O10")


# 反向计分
reverse2 <- c(9, 11, 13, 15, 17, 19, 21, 28, 30, 32, 34, 39, 41, 43, 45, 49, 51, 53) - 7
for (i in reverse2) {
  gpt_responses[i] <- 6 - gpt_responses[i] 
}


### 验证性因子分析 ###

cfa_model = "ext =~ E1 + E2 + E3 + E4 + E5 + E6 + E7 + E8 + E9 + E10
             neu =~ N1 + N2 + N3 + N4 + N5 + N6 + N7 + N8 + N9 + N10
             agr =~ A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8 + A9 + A10
             con =~ C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10
             ope =~ O1 + O2 + O3 + O4 + O5 + O6 + O7 + O8 + O9 + O10"

cfa_model.fit2 = cfa(cfa_model, data = gpt_responses)
# summary(cfa_model.fit, standardized = TRUE, fit.measures = TRUE, rsquare = TRUE)
cfa_loading2 <- as.data.frame(standardizedSolution(cfa_model.fit2))
write.csv(cfa_loading2, file = "D:/AIG/自动项目评分/dif_facet_level_detailed_en/cfa_loading_dif_facet_detailed_en.csv")

cor(cfa_loading[1:50, 4], cfa_loading2[1:50, 4])


### 项目参数 ###

# 许多 IRT 分析软件和函数（如 mirt 包）假设响应类别从 0 开始。如果数据不符合这一假设，可能会导致模型拟合过程中的错误或警告，甚至无法正确运行
gpt_responses <- gpt_responses - 1

#拟合GRM模型 #
mode_response2 <- "ext = E1, E2, E3, E4, E5, E6, E7, E8, E9, E10
                   neu = N1, N2, N3, N4, N5, N6, N7, N8, N9, N10
                   agr = A1, A2, A3, A4, A5, A6, A7, A8, A9, A10
                   con = C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
                   ope = O1, O2, O3, O4, O5, O6, O7, O8, O9, O10
                   COV = ext*neu*agr*con*ope"

# COV = F1*F2*F3*F4*F5
fit_grm2 <- mirt(data = gpt_responses, 
                 model = mode_response2,
                 itemtype = "graded",
                 method = "QMCEM")

M2(obj = fit_grm2, QMC = TRUE) # 模型拟合情况

# 项目参数估计 a b1 b2 b3 b4 #
item_parameters2 <- coef(fit_grm2)

#模型为GRM时，需要对参数进行转换,现在是真正的难度和区分度
for (i in 1:50) {
  item_parameters2[[i]][6:9] <- MDIFF(fit_grm2)[i, ]
}
item_parameters_all2 <- as.data.frame(matrix(NA, 50, 9))
for (i in 1:50) {
  for (j in 1:9) {
    item_parameters_all2[i, 1] <- names(item_parameters2)[i]
    item_parameters_all2[i, j + 1] <- as.numeric(item_parameters2[[i]][j])
  }
}
item_parameters_all2[2] <- rowSums(item_parameters_all2[, 2:6])
item_parameters_all2 <- item_parameters_all2[, c(1, 2, 7, 8, 9, 10)]
colnames(item_parameters_all2) <- c("item", "a", "b1", "b2", "b3", "b4")
item_parameters_all2 <- as.data.frame(item_parameters_all2)

write.csv(item_parameters_all2, file = "D:/AIG/自动项目评分/dif_facet_level_detailed_en/item_parameters_dif_facet_detailed_en.csv")

# 能力值估计 #
theta_est2 <- as.data.frame(fscores(fit_grm2, QMC = TRUE))
write.csv(theta_est2, file = "D:/AIG/自动项目评分/dif_facet_level_detailed_en/theta_parameters_dif_facet_detailed_en.csv")
   
# 区分度

cor(item_parameters_all[, 2], item_parameters_all2[, 2])

# 能力值

cor(theta_est[people[1:600], ], theta_est2[, ])


cor.test(theta_est[people, 5], theta_est2[, 5], method = "spearman")
